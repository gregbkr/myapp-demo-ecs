Description: >
    This template deploys a VPC, with a pair of public and private subnets
    spread across two Availabilty Zones. It deploys an Internet Gateway, with a
    default route on the public subnets. It deploys a pair of NAT Gateways
    (one in each AZ), and default routes for them in the private subnets.
    It then deploys a "hello world" application highly available ECS cluster
    using Fargate containers.
    Finally, it deploys an  ECS services from containers published in Amazon EC2
    Container Registry (Amazon ECR).
Parameters:
    S3TemplateKeyPrefix:
        Description: >
            An S3 key prefix which will be used to resolve referenced templates
        Type: String
    GitHubBranch:
        Type: String
    GitHubUser:
        Type: String
    GitHubRepo:
        Type: String
    GitHubToken:
        Type: String

Resources:
    ImageRepository:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub ${S3TemplateKeyPrefix}image-repository.yml
            Parameters:
                RepositoryName: !Ref AWS::StackName

    VPC:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub ${S3TemplateKeyPrefix}vpc.yml
            Parameters:
                EnvironmentName:    !Ref AWS::StackName
                VpcCIDR:            10.0.0.0/16
                PublicSubnet1CIDR:  10.0.10.0/24
                PublicSubnet2CIDR:  10.0.11.0/24
                PrivateSubnet1CIDR: 10.0.20.0/24
                PrivateSubnet2CIDR: 10.0.21.0/24

    SecurityGroups:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub ${S3TemplateKeyPrefix}security-groups.yml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt VPC.Outputs.VPC

    DeploymentPipeline:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub ${S3TemplateKeyPrefix}deployment-pipeline.yml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                ClusterName: !GetAtt EcsCluster.Outputs.EcsClusterName
                ServiceArn: !GetAtt EcsCluster.Outputs.EcsServiceArn
                RepositoryArn: !GetAtt ImageRepository.Outputs.RepositoryArn
                RepositoryUri: !GetAtt ImageRepository.Outputs.RepositoryUri
                GitHubUser: !Ref GitHubUser
                GitHubBranch: !Ref GitHubBranch
                GitHubRepo: !Ref GitHubRepo
                GitHubToken: !Ref GitHubToken

    ALB:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub ${S3TemplateKeyPrefix}load-balancers.yml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt VPC.Outputs.VPC
                Subnets: !GetAtt VPC.Outputs.PublicSubnets
                SecurityGroup: !GetAtt SecurityGroups.Outputs.LoadBalancerSecurityGroup

    EcsCluster:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub ${S3TemplateKeyPrefix}ecs-cluster.yml
            Parameters:
                Subnets: !GetAtt VPC.Outputs.PrivateSubnets
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt VPC.Outputs.VPC
                Listener: !GetAtt ALB.Outputs.Listener
                RepositoryUri: !GetAtt ImageRepository.Outputs.RepositoryUri
                ECSServicesSecurityGroup: !GetAtt SecurityGroups.Outputs.ECSServicesSecurityGroup

Outputs:

    WebServiceUrl:
        Description: The URL of the load balancer
        Value: !Sub http://${ALB.Outputs.LoadBalancerUrl}

    PipelineUrl:
        Description: The continuous deployment pipeline in the AWS Management Console.
        Value: !GetAtt DeploymentPipeline.Outputs.PipelineUrl